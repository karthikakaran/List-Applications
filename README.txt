CS 5V81.012 : Implementation of Data Structures and Algorithms
Optional Project 1 - Group 3

****************************************************************************************************************
Note: Timer.java and SinglyLinkedList.java needs to be compiled because most of the programs use it
so compile :  javac Timer.java, javac SinglyLinkedList.java
   run :      java Timer.java, java SinglyLinkedList.java

****************************************************************************************************************
1. MergeSort and PriorityQueue comparison

compile : 	javac MergeSort.java, javac PriorityQueue.java, javac Timer.java
run : 		java MergeSort, java PriorityQueue, java Timer.java

input:		1 million numbers from 1000000 to 1 in descending order

Output:		Sorted list:
		1 2 3 ... 1000000
		Same output for both the sorting

Explanation:	Merge sort takes 415 milliseconds.
		Priority Queue sort takes 207 milliseconds.

****************************************************************************************************************
2. Set Operations

compile :	javac SetOperation.java 
run : 		java SetOperation

input:		First list : 2 * i 
		Second list : 3 * i
		where i = 1 to 1000

output:		Result of Intersection
0 6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 102 108 114 120 126 132 138 144 150 156 162 168 174 180 186 192 198 204 210 216 222 228 234 240 246 252 258 264 270 276 282 288 294 300 306 312 318 324 330 336 342 348 354 360 366 372 378 384 390 396 402 408 414 420 426 432 438 444 450 456 462 468 474 480 486 492 498 504 510 516 522 528 534 540 546 552 558 564 570 576 582 588 594 600 606 612 618 624 630 636 642 648 654 660 666 672 678 684 690 696 702 708 714 720 726 732 738 744 750 756 762 768 774 780 786 792 798 804 810 816 822 828 834 840 846 852 858 864 870 876 882 888 894 900 906 912 918 924 930 936 942 948 954 960 966 972 978 984 990 996 1002 1008 1014 1020 1026 1032 1038 1044 1050 1056 1062 1068 1074 1080 1086 1092 1098 1104 1110 1116 1122 1128 1134 1140 1146 1152 1158 1164 1170 1176 1182 1188 1194 1200 1206 1212 1218 1224 1230 1236 1242 1248 1254 1260 1266 1272 1278 1284 1290 1296 1302 1308 1314 1320 1326 1332 1338 1344 1350 1356 1362 1368 1374 1380 1386 1392 1398 1404 1410 1416 1422 1428 1434 1440 1446 1452 1458 1464 1470 1476 1482 1488 1494 1500 1506 1512 1518 1524 1530 1536 1542 1548 1554 1560 1566 1572 1578 1584 1590 1596 1602 1608 1614 1620 1626 1632 1638 1644 1650 1656 1662 1668 1674 1680 1686 1692 1698 1704 1710 1716 1722 1728 1734 1740 1746 1752 1758 1764 1770 1776 1782 1788 1794 1800 1806 1812 1818 1824 1830 1836 1842 1848 1854 1860 1866 1872 1878 1884 1890 1896 1902 1908 1914 1920 1926 1932 1938 1944 1950 1956 1962 1968 1974 1980 1986 1992 1998 

Result of set difference


Result of Union

Time: 41 msec.
Memory: 3 MB / 123 MB.

Explanation:	Performed set operations like intersection, union and difference

****************************************************************************************************************
3. Addition Subtraction of larger numbers

compile :	javac LargeIntegers.java
run :		java LargeIntegers

input :		Enter the base
		10
		Enter the first Big Integer- digits separated by spaces
		1 2 3 4
		Enter the Second Big Integer- digits separated by spaces
		1 3 

output :	Addition result
		1 2 4 7
		Subtraction result
		1 2 2 1
		Time: 0 msec.
		Memory: 2 MB / 123 MB.

Explanation:	Given 2 integers and a base, they are stored in linked lists in reverse order
		addition and subtraction are performed, heading 0s are removed from the result 
		the result is stored reversed and returned

****************************************************************************************************************
4. Merge Sort using Singly Linked List

compile :	javac MergeSortSLL.java, javac SinglyLinkedListNoHeader.java
run :		java MergeSortSLL, java SinglyLinkedListNoHeader

note :		Tried this problem but it had a loop

Explanation :	Sort using merge sort in O (log n) extra space for recursion
		Since merging is done by changing the pointers to nodes based on sorting order 
		and we need not use temp spaces

****************************************************************************************************************
5. MultiUnzip of k 

compile :	javac SinglyLinkedList.java
run :		java SinglyLinkedList

input :		1 2 3 4 5 6 7 8 9 10 
		Enter the k value
		3

output : 	After UnZipping
		1 4 7 10 2 5 8 3 6 9 

Explanation :   k constant space bucket for each group of elements and end of each group is linked 
		to the next one. This is performed in O(n) that is 1 traversal of the list  

****************************************************************************************************************
6. Reversing the linked list and printing in reverse

compile :	javac ReverseSLL.java
run :		java ReverseSLL

input : 	Print reverse recursively ::
		10 9 8 7 6 5 4 3 2 1 
		Print reverse iteratively ::
		10 9 8 7 6 5 4 3 2 1 
		Reverse recursively ::
		10 9 8 7 6 5 4 3 2 1 
		Reverse iteratively ::
		1 2 3 4 5 6 7 8 9 10 

Explanation :   Reverse printing and reversing the list iteratively and recursively in O(n) time

****************************************************************************************************************
7. Merge Circular LinkedList

compile : 	javac CircularLinkedListOperations.java, java CircularLinkedList
run :		javac CircularLinkedList, java CircularLinkedList

input :	        Given circular list :: 
		1 2 3 4 5 6 7 8 9 10 
		Second circular list :: 
		11 12 13 14 15

output : 	Cannot merge

input :		Given circular list :: 
		1 2 3 4 5 6 7 8 9 10 
		Second circular list :: 
		1 2 3 4 5 

output :	Final circular list :: 
		1 2 3 4 5 1 2 3 4 5 6 7 8 9 10 

Explanation:    The given circular list is indexed using the hashmap with elements and references 
                the first node of the second circular list is linked to the reference provided by the index
		and the last node is linked with the next node in the first circular list.

